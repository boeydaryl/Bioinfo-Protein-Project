Diary Week 2

2018 26 Feb

Continue working on the generation of SKlearn vector. Usage of intermediate amino acid "windows" before encoding is not advised; to generate encoding direct from sequence, adding the padding when necessary.

Created a new streamlined version of trialSVM.py, called VectorCreator.py.

Attempted a preliminary version of this code using Deques; producing an increasing subsequence up to the maximum length, which was configured to be the window size, and directly encoded the output from deque. By selecting encoded sequences of longer than (pad+1)*20, the algorithm selects the correct first encoded window and padding it with the difference between supposed length and the shorter-than window; the encoded windows which have correct lengths are not modified. This works to produce the correct output for the head window to second-to-last window. To improve the algorithm to produce the tail windows as well.

2018 27 Feb

Rejected the idea of using deques due to complication, decided instead to return the iterative function. Successfully generated windows for a single sequence including padding by stipulating 3 if conditions: 1. if the index <=0, meaning the first residue, 2. if the index is >0 and < padding, meaning the residues between the first and the padded distance, and 3. if the index >= padding, meaning the remaining residues. Padding was applied accordingly for all 3 conditions depending on how many residues are missing from total window length. This was done in a new script called VectorCreatorTrial.py to retain notes from the previous script.

VectorCreatorTrial also performs a hard-coded binary encoding of both the AA windows (to features) and the topology windows (to labels, and outputs two final lists to be fed into the SVM. A small script prior to the input of the encoded features asserts that the count for both encoded features and labels is the same as a quality control. The list of encoded features has a list containing nested lists of the binary code 20*windowsize, while the list of labels consists of a single layer list of a value for each topology per middle residue/window.

In the evening, attempted to feed the encoded features to the SVM, but kept turning a value error "setting an array element with a sequence".

2018 28 Feb

Realised there was an error in the AADictionary; where there was an amino acid with missing zeros, and was not coming up to a total of 20. Editing that resolved all problems; chances are that the larger files had the problematic amino acid in the sequence.

To try running the cross_val_score for test files of 10 amino acids and 50 amino acids, with varying window sizes.

In the instance of the 10 amino acids and window size 3, with cv(number of computations with different splits each time) 5, the average accuracy of the linear kernel SVM was 0.707253637375715. Running the same conditions with window size 5 returned an accuracy of 0.7059407270912511 (test time 0m3.630s) , while window size 7 gave 0.7002514491919076. Bumping up the window size to 15 gave an accuracy of 0.6730958961956313.

Running the cross-validation on testfilesize50 with windowsize 5 and 5 splits gave an average accuracy of 0.6834867269419853 (test time 1m44.621s). To try to calculate and scale up the time it will take to process the full dataset (375 entries).

2018 1 Mar

Finalised preliminary presentation for "Learning protein multi-view features in complex space", and presented it to 4 peers prior to lunch. Finished writing evaluations for 4 peers (Milda, Kajetan, Sharmishta, and Kyle) after. To be submitted to Arne via his urkund email address.

Additionally, further cleaned and optimised SVMInput.py to print only useful scores, and removed redundant bits of code that was included in the writing phase.

2018 2 Mar

Confirmed that SVMInput script located in /Users/daryl/Documents/Bioinfo-Protein-Project/Project/General works to parse and feed encoded vectors to SVC in Sklearn. This works with all testfiles included in the repository, including testfilesize10.txt and testfilesize50.txt.

