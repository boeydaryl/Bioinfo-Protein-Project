Diary week 1

2018 19 Feb

Personal assigned project is to predict if, given an amino acid sequence, if the state is buried or exposed. The dataset assigned was "buried-exposed", and it's a 3 line file (header/title, AA sequence, and assigned states).

The overall motive of the project is to write a program that, given an amino acid sequence, can predict the states like in the assigned dataset file. The dataset is to be used to train the program to do this.

Wrote a simple 3 line parser to format the dataset; first into a dictionary, followed by a pandas dataframe to allow for faster retrieval of data.


2018 20 Feb

Attended project introduction session, more about the project requirements was mentioned.
Basic requirements:
Extract the feature from your dataset
Create cross-validated sets
Train a SVM using single sequence information, using sklearn
Check different window sizes for the inputs
Analyze the results and compare it to previous work
Review the state of art for your predictor
Write a report

Additional requirements:
Add evolutionary information by running psi-blast and extracting the information
Train a SVM using multiple sequence information
Optimize the performance of the SVM
Use random forests and a simple decision tree and compare the performance with the SVM performance.
Extract the data from 50 other proteins and test the performance.

As such, the plan for week 1 is to establish a solid project framework/guideline, as well as read up on a minimum of 5 relevant publications related to the prediction of buried/exposed states, as well as to make a couple of tries at prediction model using Scikit-learn.

Interesting additional reading to get more specifics about Machine-Learning (https://machinelearningmastery.com/machine-learning-tribe/).

Parsed and produced an output .csv file from buried-exposed.3line.txt called fulloutput.csv, and verified that the output matched that of the input.


2018 21 Feb

Went cross-country skating (långfärdskridskor) in the morning and early afternoon to clear the mind, resulted in getting a better picture of the overall flow of the project.

Brief summary of the project plan: END GOAL-> Predict buried/exposed states of a given sequence. Tools --> Dataset (Header, AA sequence, and state). Parse dataset (dictionary) --> Write script to retrieve a window of AAs and states (i+7, and i-7), including padding the AAs at the start and end. --> Encode these 15 residues/states into SVM-compatible format. --> When feeding to SVM, to slice dataset into training/validation segments for cross-validation. --> Train SVM. --> Test against other reference sequences to get metrics for comparison. --> Report.

Spent the evening searching for relevant publications to the topic (machine learning, buried/exposed state, prediction) on pubmed. Found an interesting publication: Yu, DJ., Hu, J., Wu, XW. et al. Amino Acids (2013) 44: 1365. https://doi.org/10.1007/s00726-013-1472-6.

2018 22 Feb

Since the skating yesterday was so effective, did another quick round of skating today morning as well.

To continue work on the one page project summary, and searching for more relevant publications.

Publications:

Yu, DJ., Hu, J., Wu, XW. et al. Amino Acids (2013) 44: 1365. https://doi.org/10.1007/s00726-013-1472-6.
Biochimie. 2010 Oct;92(10):1330-4. doi: 10.1016/j.biochi.2010.06.013. Epub 2010 Jun 23.
Amino Acids. 2008 Oct;35(3):581-90. doi: 10.1007/s00726-008-0084-z. Epub 2008 Apr 22.
Bioinformatics. 2007 Oct 1;23(19):2507-17. Epub 2007 Aug 24.
Bioinformatics. 2010 Feb 1;26(3):440-3. doi: 10.1093/bioinformatics/btp621. Epub 2009 Oct 29.

With respect to the encoding of the AAs and states, this is an excellent resource (https://machinelearningmastery.com/how-to-one-hot-encode-sequence-data-in-python/). Summary: to use LabelEncoder to first create integer encoding of the labels, followed by OneHotEncoder to perform a one hot encoding of the encoded integers.

While having fika in IlCaffe, updated trialSVM.py to include 2 additional subscripts. The first performs a basic window creation of the AA and states (configurable window size) for i+windowsize, but is yet to include the ability to retrieve a window of i-X and i+X. This may not be an accurate representation of the complete dataset as it excludes the values in the front and tail of the sequence. The second script performs an encoding of the windows into an SVM compatible format, first by using LabelEncoder to encode the windows as integers, followed by OneHotEncoder to convert the integer-windows into an SVM compatible format (binary). To follow up with fine-tuning the window script, as well as starting on feeding the dataset to SVM.

2018 23 Feb 

To improve upon the window generation script by improving iterative loop in generating windows including both the + and - of i.

Received advice from the TAs to start with more rudimentary methods to encode the windows, as using LabelEncoder is presently leading to incorrect values. Therefore generated a dictionary of binary values of 20 characters for the 20 amino acids, plus an additional residue called "O" to be used for window generation(padding). Encode the windows using this dictionary instead using a for loop to iterate through each window.
